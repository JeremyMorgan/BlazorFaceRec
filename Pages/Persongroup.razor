@page "/Persongroup"
@using System.Runtime.CompilerServices
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Mime

<h3>Persongroup!</h3>

<label>Name of the PersonGroup:</label>
<br />
<input @bind="PersonGroupName" />
<br />
<label>Description: </label>
<br />
<input @bind="PersonGroupDescription" />
<br />
<br />
<button @onclick="@AddPersonGroup">Add Person Group</button>

<p>@DisplayMessage</p>

@if (_personGroups != null)
{

    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Description</th>
                <th scope="col">ID</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var personGroup in _personGroups)
            {
                <tr>
                    <td>@personGroup.name</td>
                    <td>@personGroup.userData</td>
                    <td>@personGroup.personGroupId</td>
                    <td><button @onclick="@(() => DeletePersonGroup(@personGroup.personGroupId))">DELETE</button></td>
                </tr>
            }
        </tbody>

    </table>

}
else
{
    DisplayMessage = "No Groups Present";
}


@code {

    private PersonGroup[] _personGroups;
    public string PersonGroupName { get; set; }
    public string PersonGroupDescription { get; set; }
    public string DisplayMessage { get; set; }

    [Inject]
    private AppConfiguration _config { get; set; }

    public class PersonGroup
    {
        public string personGroupId { get; set; }
        public string name { get; set; }
        public string userData { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        DisplayMessage = "hello!";
        await PopulateTable();
    }

    private async Task PopulateTable()
    {

        HttpClient client = new HttpClient { BaseAddress = new Uri(_config.BaseUrl + "face/v1.0/persongroups/") };

        HttpResponseMessage response = null;

        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", _config.ApiKey);

        response = await client.GetAsync(client.BaseAddress);

        if (response.Content is object && response.Content.Headers.ContentType.MediaType == "application/json")
        {
            var content = await response.Content.ReadAsStringAsync();
            _personGroups = JsonSerializer.Deserialize<PersonGroup[]>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
    }

    private async Task AddPersonGroup()
    {
        Guid id = Guid.NewGuid();

        HttpClient client = new HttpClient { BaseAddress = new Uri(_config.BaseUrl + "face/v1.0/persongroups/" + id) };

        HttpResponseMessage response = null;

        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", _config.ApiKey);

        var payload = new PersonGroup { name = PersonGroupName, userData = PersonGroupDescription };

        var payloadString = new StringContent(System.Text.Json.JsonSerializer.Serialize(payload), Encoding.UTF8, MediaTypeNames.Application.Json);

        response = await client.PutAsync(client.BaseAddress, payloadString);

        if (response.IsSuccessStatusCode)
        {
            await PopulateTable();
            DisplayMessage = "added!";
        }
        else
        {
            DisplayMessage = response.StatusCode.ToString() + "\n" + client.BaseAddress.ToString();
        }

    }

    private async Task DeletePersonGroup(string id)
    {
        HttpClient client = new HttpClient { BaseAddress = new Uri(_config.BaseUrl + "face/v1.0/persongroups/" + id) };

        HttpResponseMessage response = null;

        client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", _config.ApiKey);

        response = await client.DeleteAsync(client.BaseAddress);

        if (response.IsSuccessStatusCode)
        {
            DisplayMessage = "We deleted: " + id;
        }

        await PopulateTable();
    }
}
